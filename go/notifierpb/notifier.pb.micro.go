// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: notifier.proto

package notifierpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/unistack-org/micro/v3/api"
	client "github.com/unistack-org/micro/v3/client"
	server "github.com/unistack-org/micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for NotifierService service

func NewNotifierServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for NotifierService service

type NotifierService interface {
	CheckUser(ctx context.Context, req *CheckUserRequest, opts ...client.CallOption) (*CheckUserResponse, error)
}

type notifierService struct {
	c    client.Client
	name string
}

func NewNotifierService(name string, c client.Client) NotifierService {
	return &notifierService{
		c:    c,
		name: name,
	}
}

func (c *notifierService) CheckUser(ctx context.Context, req *CheckUserRequest, opts ...client.CallOption) (*CheckUserResponse, error) {
	rsp := &CheckUserResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "NotifierService.CheckUser", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// Server API for NotifierService service

type NotifierServiceHandler interface {
	CheckUser(context.Context, *CheckUserRequest, *CheckUserResponse) error
}

func RegisterNotifierServiceHandler(s server.Server, hdlr NotifierServiceHandler, opts ...server.HandlerOption) error {
	type notifierService interface {
		CheckUser(ctx context.Context, req *CheckUserRequest, rsp *CheckUserResponse) error
	}
	type NotifierService struct {
		notifierService
	}
	h := &notifierServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&NotifierService{h}, opts...))
}

type notifierServiceHandler struct {
	NotifierServiceHandler
}

func (h *notifierServiceHandler) CheckUser(ctx context.Context, req *CheckUserRequest, rsp *CheckUserResponse) error {
	return h.NotifierServiceHandler.CheckUser(ctx, req, rsp)
}
