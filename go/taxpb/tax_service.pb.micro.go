// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: tax_service.proto

package taxpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/unistack-org/micro/v3/api"
	client "github.com/unistack-org/micro/v3/client"
	server "github.com/unistack-org/micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TaxService service

func NewTaxServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TaxService service

type TaxService interface {
	GetRate(ctx context.Context, req *GeoIdentity, opts ...client.CallOption) (*TaxRate, error)
	GetRates(ctx context.Context, req *GetRatesRequest, opts ...client.CallOption) (*GetRatesResponse, error)
	CreateOrUpdate(ctx context.Context, req *TaxRate, opts ...client.CallOption) (*TaxRate, error)
	DeleteRateById(ctx context.Context, req *DeleteRateRequest, opts ...client.CallOption) (*DeleteRateResponse, error)
}

type taxService struct {
	c    client.Client
	name string
}

func NewTaxService(name string, c client.Client) TaxService {
	return &taxService{
		c:    c,
		name: name,
	}
}

func (c *taxService) GetRate(ctx context.Context, req *GeoIdentity, opts ...client.CallOption) (*TaxRate, error) {
	rsp := &TaxRate{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "TaxService.GetRate", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *taxService) GetRates(ctx context.Context, req *GetRatesRequest, opts ...client.CallOption) (*GetRatesResponse, error) {
	rsp := &GetRatesResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "TaxService.GetRates", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *taxService) CreateOrUpdate(ctx context.Context, req *TaxRate, opts ...client.CallOption) (*TaxRate, error) {
	rsp := &TaxRate{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "TaxService.CreateOrUpdate", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *taxService) DeleteRateById(ctx context.Context, req *DeleteRateRequest, opts ...client.CallOption) (*DeleteRateResponse, error) {
	rsp := &DeleteRateResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "TaxService.DeleteRateById", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// Server API for TaxService service

type TaxServiceHandler interface {
	GetRate(context.Context, *GeoIdentity, *TaxRate) error
	GetRates(context.Context, *GetRatesRequest, *GetRatesResponse) error
	CreateOrUpdate(context.Context, *TaxRate, *TaxRate) error
	DeleteRateById(context.Context, *DeleteRateRequest, *DeleteRateResponse) error
}

func RegisterTaxServiceHandler(s server.Server, hdlr TaxServiceHandler, opts ...server.HandlerOption) error {
	type taxService interface {
		GetRate(ctx context.Context, req *GeoIdentity, rsp *TaxRate) error
		GetRates(ctx context.Context, req *GetRatesRequest, rsp *GetRatesResponse) error
		CreateOrUpdate(ctx context.Context, req *TaxRate, rsp *TaxRate) error
		DeleteRateById(ctx context.Context, req *DeleteRateRequest, rsp *DeleteRateResponse) error
	}
	type TaxService struct {
		taxService
	}
	h := &taxServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TaxService{h}, opts...))
}

type taxServiceHandler struct {
	TaxServiceHandler
}

func (h *taxServiceHandler) GetRate(ctx context.Context, req *GeoIdentity, rsp *TaxRate) error {
	return h.TaxServiceHandler.GetRate(ctx, req, rsp)
}

func (h *taxServiceHandler) GetRates(ctx context.Context, req *GetRatesRequest, rsp *GetRatesResponse) error {
	return h.TaxServiceHandler.GetRates(ctx, req, rsp)
}

func (h *taxServiceHandler) CreateOrUpdate(ctx context.Context, req *TaxRate, rsp *TaxRate) error {
	return h.TaxServiceHandler.CreateOrUpdate(ctx, req, rsp)
}

func (h *taxServiceHandler) DeleteRateById(ctx context.Context, req *DeleteRateRequest, rsp *DeleteRateResponse) error {
	return h.TaxServiceHandler.DeleteRateById(ctx, req, rsp)
}
