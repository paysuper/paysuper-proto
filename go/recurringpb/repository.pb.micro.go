// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: repository.proto

package recurringpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	api "github.com/unistack-org/micro/v3/api"
	client "github.com/unistack-org/micro/v3/client"
	server "github.com/unistack-org/micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Repository service

func NewRepositoryEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Repository service

type RepositoryService interface {
	InsertSavedCard(ctx context.Context, req *SavedCardRequest, opts ...client.CallOption) (*Result, error)
	DeleteSavedCard(ctx context.Context, req *DeleteSavedCardRequest, opts ...client.CallOption) (*DeleteSavedCardResponse, error)
	FindSavedCards(ctx context.Context, req *SavedCardRequest, opts ...client.CallOption) (*SavedCardList, error)
	FindSavedCardById(ctx context.Context, req *FindByStringValue, opts ...client.CallOption) (*SavedCard, error)
	AddSubscription(ctx context.Context, req *Subscription, opts ...client.CallOption) (*AddSubscriptionResponse, error)
	UpdateSubscription(ctx context.Context, req *Subscription, opts ...client.CallOption) (*UpdateSubscriptionResponse, error)
	GetSubscription(ctx context.Context, req *GetSubscriptionRequest, opts ...client.CallOption) (*GetSubscriptionResponse, error)
	FindSubscriptions(ctx context.Context, req *FindSubscriptionsRequest, opts ...client.CallOption) (*FindSubscriptionsResponse, error)
	DeleteSubscription(ctx context.Context, req *Subscription, opts ...client.CallOption) (*DeleteSubscriptionResponse, error)
}

type repositoryService struct {
	c    client.Client
	name string
}

func NewRepositoryService(name string, c client.Client) RepositoryService {
	return &repositoryService{
		c:    c,
		name: name,
	}
}

func (c *repositoryService) InsertSavedCard(ctx context.Context, req *SavedCardRequest, opts ...client.CallOption) (*Result, error) {
	rsp := &Result{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Repository.InsertSavedCard", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *repositoryService) DeleteSavedCard(ctx context.Context, req *DeleteSavedCardRequest, opts ...client.CallOption) (*DeleteSavedCardResponse, error) {
	rsp := &DeleteSavedCardResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Repository.DeleteSavedCard", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *repositoryService) FindSavedCards(ctx context.Context, req *SavedCardRequest, opts ...client.CallOption) (*SavedCardList, error) {
	rsp := &SavedCardList{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Repository.FindSavedCards", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *repositoryService) FindSavedCardById(ctx context.Context, req *FindByStringValue, opts ...client.CallOption) (*SavedCard, error) {
	rsp := &SavedCard{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Repository.FindSavedCardById", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *repositoryService) AddSubscription(ctx context.Context, req *Subscription, opts ...client.CallOption) (*AddSubscriptionResponse, error) {
	rsp := &AddSubscriptionResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Repository.AddSubscription", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *repositoryService) UpdateSubscription(ctx context.Context, req *Subscription, opts ...client.CallOption) (*UpdateSubscriptionResponse, error) {
	rsp := &UpdateSubscriptionResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Repository.UpdateSubscription", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *repositoryService) GetSubscription(ctx context.Context, req *GetSubscriptionRequest, opts ...client.CallOption) (*GetSubscriptionResponse, error) {
	rsp := &GetSubscriptionResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Repository.GetSubscription", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *repositoryService) FindSubscriptions(ctx context.Context, req *FindSubscriptionsRequest, opts ...client.CallOption) (*FindSubscriptionsResponse, error) {
	rsp := &FindSubscriptionsResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Repository.FindSubscriptions", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *repositoryService) DeleteSubscription(ctx context.Context, req *Subscription, opts ...client.CallOption) (*DeleteSubscriptionResponse, error) {
	rsp := &DeleteSubscriptionResponse{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Repository.DeleteSubscription", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// Server API for Repository service

type RepositoryHandler interface {
	InsertSavedCard(context.Context, *SavedCardRequest, *Result) error
	DeleteSavedCard(context.Context, *DeleteSavedCardRequest, *DeleteSavedCardResponse) error
	FindSavedCards(context.Context, *SavedCardRequest, *SavedCardList) error
	FindSavedCardById(context.Context, *FindByStringValue, *SavedCard) error
	AddSubscription(context.Context, *Subscription, *AddSubscriptionResponse) error
	UpdateSubscription(context.Context, *Subscription, *UpdateSubscriptionResponse) error
	GetSubscription(context.Context, *GetSubscriptionRequest, *GetSubscriptionResponse) error
	FindSubscriptions(context.Context, *FindSubscriptionsRequest, *FindSubscriptionsResponse) error
	DeleteSubscription(context.Context, *Subscription, *DeleteSubscriptionResponse) error
}

func RegisterRepositoryHandler(s server.Server, hdlr RepositoryHandler, opts ...server.HandlerOption) error {
	type repository interface {
		InsertSavedCard(ctx context.Context, req *SavedCardRequest, rsp *Result) error
		DeleteSavedCard(ctx context.Context, req *DeleteSavedCardRequest, rsp *DeleteSavedCardResponse) error
		FindSavedCards(ctx context.Context, req *SavedCardRequest, rsp *SavedCardList) error
		FindSavedCardById(ctx context.Context, req *FindByStringValue, rsp *SavedCard) error
		AddSubscription(ctx context.Context, req *Subscription, rsp *AddSubscriptionResponse) error
		UpdateSubscription(ctx context.Context, req *Subscription, rsp *UpdateSubscriptionResponse) error
		GetSubscription(ctx context.Context, req *GetSubscriptionRequest, rsp *GetSubscriptionResponse) error
		FindSubscriptions(ctx context.Context, req *FindSubscriptionsRequest, rsp *FindSubscriptionsResponse) error
		DeleteSubscription(ctx context.Context, req *Subscription, rsp *DeleteSubscriptionResponse) error
	}
	type Repository struct {
		repository
	}
	h := &repositoryHandler{hdlr}
	return s.Handle(s.NewHandler(&Repository{h}, opts...))
}

type repositoryHandler struct {
	RepositoryHandler
}

func (h *repositoryHandler) InsertSavedCard(ctx context.Context, req *SavedCardRequest, rsp *Result) error {
	return h.RepositoryHandler.InsertSavedCard(ctx, req, rsp)
}

func (h *repositoryHandler) DeleteSavedCard(ctx context.Context, req *DeleteSavedCardRequest, rsp *DeleteSavedCardResponse) error {
	return h.RepositoryHandler.DeleteSavedCard(ctx, req, rsp)
}

func (h *repositoryHandler) FindSavedCards(ctx context.Context, req *SavedCardRequest, rsp *SavedCardList) error {
	return h.RepositoryHandler.FindSavedCards(ctx, req, rsp)
}

func (h *repositoryHandler) FindSavedCardById(ctx context.Context, req *FindByStringValue, rsp *SavedCard) error {
	return h.RepositoryHandler.FindSavedCardById(ctx, req, rsp)
}

func (h *repositoryHandler) AddSubscription(ctx context.Context, req *Subscription, rsp *AddSubscriptionResponse) error {
	return h.RepositoryHandler.AddSubscription(ctx, req, rsp)
}

func (h *repositoryHandler) UpdateSubscription(ctx context.Context, req *Subscription, rsp *UpdateSubscriptionResponse) error {
	return h.RepositoryHandler.UpdateSubscription(ctx, req, rsp)
}

func (h *repositoryHandler) GetSubscription(ctx context.Context, req *GetSubscriptionRequest, rsp *GetSubscriptionResponse) error {
	return h.RepositoryHandler.GetSubscription(ctx, req, rsp)
}

func (h *repositoryHandler) FindSubscriptions(ctx context.Context, req *FindSubscriptionsRequest, rsp *FindSubscriptionsResponse) error {
	return h.RepositoryHandler.FindSubscriptions(ctx, req, rsp)
}

func (h *repositoryHandler) DeleteSubscription(ctx context.Context, req *Subscription, rsp *DeleteSubscriptionResponse) error {
	return h.RepositoryHandler.DeleteSubscription(ctx, req, rsp)
}
