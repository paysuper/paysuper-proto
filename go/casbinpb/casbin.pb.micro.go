// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: casbin.proto

package casbinpb

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/unistack-org/micro/v3/api"
	client "github.com/unistack-org/micro/v3/client"
	server "github.com/unistack-org/micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Casbin service

func NewCasbinEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "Casbin.Enforce",
			Path:    []string{"/casbin/enforce"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.ImportPolicy",
			Path:    []string{"/casbin/import_policy"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.LoadPolicy",
			Path:    []string{"/casbin/load_policy"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.SavePolicy",
			Path:    []string{"/casbin/save_policy"},
			Method:  []string{"PUT"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.AddPolicy",
			Path:    []string{"/casbin/add_policy"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.AddNamedPolicy",
			Path:    []string{"/casbin/add_named_policy"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.RemovePolicy",
			Path:    []string{"/casbin/remove_policy"},
			Method:  []string{"DELETE"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.RemoveNamedPolicy",
			Path:    []string{"/casbin/remove_named_policy"},
			Method:  []string{"DELETE"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.RemoveFilteredPolicy",
			Path:    []string{"/casbin/remove_filtered_policy"},
			Method:  []string{"DELETE"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.RemoveFilteredNamedPolicy",
			Path:    []string{"/casbin/remove_filtered_named_policy"},
			Method:  []string{"DELETE"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetPolicy",
			Path:    []string{"/casbin/get_policy"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetNamedPolicy",
			Path:    []string{"/casbin/get_named_policy"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetFilteredPolicy",
			Path:    []string{"/casbin/get_filtered_policy"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetFilteredNamedPolicy",
			Path:    []string{"/casbin/get_filtered_named_policy"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.AddGroupingPolicy",
			Path:    []string{"/casbin/add_grouping_policy"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.AddNamedGroupingPolicy",
			Path:    []string{"/casbin/add_named_grouping_policy"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.RemoveGroupingPolicy",
			Path:    []string{"/casbin/remove_grouping_policy"},
			Method:  []string{"DELETE"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.RemoveNamedGroupingPolicy",
			Path:    []string{"/casbin/remove_named_grouping_policy"},
			Method:  []string{"DELETE"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.RemoveFilteredGroupingPolicy",
			Path:    []string{"/casbin/remove_filtered_grouping_policy"},
			Method:  []string{"DELETE"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.RemoveFilteredNamedGroupingPolicy",
			Path:    []string{"/casbin/remove_filtered_named_grouping_policy"},
			Method:  []string{"DELETE"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetGroupingPolicy",
			Path:    []string{"/casbin/get_grouping_policy"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetNamedGroupingPolicy",
			Path:    []string{"/casbin/get_named_grouping_policy"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetFilteredGroupingPolicy",
			Path:    []string{"/casbin/get_filtered_grouping_policy"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetFilteredNamedGroupingPolicy",
			Path:    []string{"/casbin/get_filtered_named_grouping_policy"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetAllSubjects",
			Path:    []string{"/casbin/get_all_subjects"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetAllNamedSubjects",
			Path:    []string{"/casbin/get_all_named_subjects"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetAllObjects",
			Path:    []string{"/casbin/get_all_objects"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetAllNamedObjects",
			Path:    []string{"/casbin/get_all_named_objects"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetAllActions",
			Path:    []string{"/casbin/get_all_actions"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetAllNamedActions",
			Path:    []string{"/casbin/get_all_named_actions"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetAllRoles",
			Path:    []string{"/casbin/get_all_roles"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetAllNamedRoles",
			Path:    []string{"/casbin/get_all_named_roles"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.HasPolicy",
			Path:    []string{"/casbin/has_policy"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.HasNamedPolicy",
			Path:    []string{"/casbin/has_named_policy"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.HasGroupingPolicy",
			Path:    []string{"/casbin/has_grouping_policy"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.HasNamedGroupingPolicy",
			Path:    []string{"/casbin/has_named_grouping_policy"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.AddRoleForUser",
			Path:    []string{"/casbin/add_role_for_user"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.DeleteRoleForUser",
			Path:    []string{"/casbin/delete_role_for_user"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.DeleteUser",
			Path:    []string{"/casbin/delete_user"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetRolesForUser",
			Path:    []string{"/casbin/get_roles_for_user"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetImplicitRolesForUser",
			Path:    []string{"/casbin/get_implicit_roles_for_user"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetUsersForRole",
			Path:    []string{"/casbin/get_users_for_role"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetPermissionsForUser",
			Path:    []string{"/casbin/get_permissions_for_user"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Casbin.GetImplicitPermissionsForUser",
			Path:    []string{"/casbin/get_implicit_permissions_for_user"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for Casbin service

type CasbinService interface {
	Enforce(ctx context.Context, req *EnforceRequest, opts ...client.CallOption) (*Empty, error)
	ImportPolicy(ctx context.Context, req *ImportPolicyRequest, opts ...client.CallOption) (*Empty, error)
	LoadPolicy(ctx context.Context, req *Empty, opts ...client.CallOption) (*Empty, error)
	SavePolicy(ctx context.Context, req *Empty, opts ...client.CallOption) (*Empty, error)
	AddPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error)
	AddNamedPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error)
	RemovePolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error)
	RemoveNamedPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error)
	RemoveFilteredPolicy(ctx context.Context, req *FilteredPolicyRequest, opts ...client.CallOption) (*Empty, error)
	RemoveFilteredNamedPolicy(ctx context.Context, req *FilteredPolicyRequest, opts ...client.CallOption) (*Empty, error)
	GetPolicy(ctx context.Context, req *Empty, opts ...client.CallOption) (*Array2DReply, error)
	GetNamedPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Array2DReply, error)
	GetFilteredPolicy(ctx context.Context, req *FilteredPolicyRequest, opts ...client.CallOption) (*Array2DReply, error)
	GetFilteredNamedPolicy(ctx context.Context, req *FilteredPolicyRequest, opts ...client.CallOption) (*Array2DReply, error)
	AddGroupingPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error)
	AddNamedGroupingPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error)
	RemoveGroupingPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error)
	RemoveNamedGroupingPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error)
	RemoveFilteredGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest, opts ...client.CallOption) (*Empty, error)
	RemoveFilteredNamedGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest, opts ...client.CallOption) (*Empty, error)
	GetGroupingPolicy(ctx context.Context, req *Empty, opts ...client.CallOption) (*Array2DReply, error)
	GetNamedGroupingPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Array2DReply, error)
	GetFilteredGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest, opts ...client.CallOption) (*Array2DReply, error)
	GetFilteredNamedGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest, opts ...client.CallOption) (*Array2DReply, error)
	GetAllSubjects(ctx context.Context, req *Empty, opts ...client.CallOption) (*ArrayReply, error)
	GetAllNamedSubjects(ctx context.Context, req *SimpleGetRequest, opts ...client.CallOption) (*ArrayReply, error)
	GetAllObjects(ctx context.Context, req *Empty, opts ...client.CallOption) (*ArrayReply, error)
	GetAllNamedObjects(ctx context.Context, req *SimpleGetRequest, opts ...client.CallOption) (*ArrayReply, error)
	GetAllActions(ctx context.Context, req *Empty, opts ...client.CallOption) (*ArrayReply, error)
	GetAllNamedActions(ctx context.Context, req *SimpleGetRequest, opts ...client.CallOption) (*ArrayReply, error)
	GetAllRoles(ctx context.Context, req *Empty, opts ...client.CallOption) (*ArrayReply, error)
	GetAllNamedRoles(ctx context.Context, req *SimpleGetRequest, opts ...client.CallOption) (*ArrayReply, error)
	HasPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error)
	HasNamedPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error)
	HasGroupingPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error)
	HasNamedGroupingPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error)
	AddRoleForUser(ctx context.Context, req *UserRoleRequest, opts ...client.CallOption) (*Empty, error)
	DeleteRoleForUser(ctx context.Context, req *UserRoleRequest, opts ...client.CallOption) (*Empty, error)
	DeleteUser(ctx context.Context, req *UserRoleRequest, opts ...client.CallOption) (*Empty, error)
	GetRolesForUser(ctx context.Context, req *UserRoleRequest, opts ...client.CallOption) (*ArrayReply, error)
	GetImplicitRolesForUser(ctx context.Context, req *UserRoleRequest, opts ...client.CallOption) (*ArrayReply, error)
	GetUsersForRole(ctx context.Context, req *UserRoleRequest, opts ...client.CallOption) (*ArrayReply, error)
	GetPermissionsForUser(ctx context.Context, req *PermissionRequest, opts ...client.CallOption) (*Array2DReply, error)
	GetImplicitPermissionsForUser(ctx context.Context, req *PermissionRequest, opts ...client.CallOption) (*Array2DReply, error)
}

type casbinService struct {
	c    client.Client
	name string
}

func NewCasbinService(name string, c client.Client) CasbinService {
	return &casbinService{
		c:    c,
		name: name,
	}
}

func (c *casbinService) Enforce(ctx context.Context, req *EnforceRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.Enforce", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) ImportPolicy(ctx context.Context, req *ImportPolicyRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.ImportPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) LoadPolicy(ctx context.Context, req *Empty, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.LoadPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) SavePolicy(ctx context.Context, req *Empty, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.SavePolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) AddPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.AddPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) AddNamedPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.AddNamedPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) RemovePolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.RemovePolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) RemoveNamedPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.RemoveNamedPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) RemoveFilteredPolicy(ctx context.Context, req *FilteredPolicyRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.RemoveFilteredPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) RemoveFilteredNamedPolicy(ctx context.Context, req *FilteredPolicyRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.RemoveFilteredNamedPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetPolicy(ctx context.Context, req *Empty, opts ...client.CallOption) (*Array2DReply, error) {
	rsp := &Array2DReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetNamedPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Array2DReply, error) {
	rsp := &Array2DReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetNamedPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetFilteredPolicy(ctx context.Context, req *FilteredPolicyRequest, opts ...client.CallOption) (*Array2DReply, error) {
	rsp := &Array2DReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetFilteredPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetFilteredNamedPolicy(ctx context.Context, req *FilteredPolicyRequest, opts ...client.CallOption) (*Array2DReply, error) {
	rsp := &Array2DReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetFilteredNamedPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) AddGroupingPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.AddGroupingPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) AddNamedGroupingPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.AddNamedGroupingPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) RemoveGroupingPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.RemoveGroupingPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) RemoveNamedGroupingPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.RemoveNamedGroupingPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) RemoveFilteredGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.RemoveFilteredGroupingPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) RemoveFilteredNamedGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.RemoveFilteredNamedGroupingPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetGroupingPolicy(ctx context.Context, req *Empty, opts ...client.CallOption) (*Array2DReply, error) {
	rsp := &Array2DReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetGroupingPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetNamedGroupingPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Array2DReply, error) {
	rsp := &Array2DReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetNamedGroupingPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetFilteredGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest, opts ...client.CallOption) (*Array2DReply, error) {
	rsp := &Array2DReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetFilteredGroupingPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetFilteredNamedGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest, opts ...client.CallOption) (*Array2DReply, error) {
	rsp := &Array2DReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetFilteredNamedGroupingPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetAllSubjects(ctx context.Context, req *Empty, opts ...client.CallOption) (*ArrayReply, error) {
	rsp := &ArrayReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetAllSubjects", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetAllNamedSubjects(ctx context.Context, req *SimpleGetRequest, opts ...client.CallOption) (*ArrayReply, error) {
	rsp := &ArrayReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetAllNamedSubjects", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetAllObjects(ctx context.Context, req *Empty, opts ...client.CallOption) (*ArrayReply, error) {
	rsp := &ArrayReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetAllObjects", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetAllNamedObjects(ctx context.Context, req *SimpleGetRequest, opts ...client.CallOption) (*ArrayReply, error) {
	rsp := &ArrayReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetAllNamedObjects", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetAllActions(ctx context.Context, req *Empty, opts ...client.CallOption) (*ArrayReply, error) {
	rsp := &ArrayReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetAllActions", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetAllNamedActions(ctx context.Context, req *SimpleGetRequest, opts ...client.CallOption) (*ArrayReply, error) {
	rsp := &ArrayReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetAllNamedActions", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetAllRoles(ctx context.Context, req *Empty, opts ...client.CallOption) (*ArrayReply, error) {
	rsp := &ArrayReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetAllRoles", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetAllNamedRoles(ctx context.Context, req *SimpleGetRequest, opts ...client.CallOption) (*ArrayReply, error) {
	rsp := &ArrayReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetAllNamedRoles", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) HasPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.HasPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) HasNamedPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.HasNamedPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) HasGroupingPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.HasGroupingPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) HasNamedGroupingPolicy(ctx context.Context, req *PolicyRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.HasNamedGroupingPolicy", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) AddRoleForUser(ctx context.Context, req *UserRoleRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.AddRoleForUser", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) DeleteRoleForUser(ctx context.Context, req *UserRoleRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.DeleteRoleForUser", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) DeleteUser(ctx context.Context, req *UserRoleRequest, opts ...client.CallOption) (*Empty, error) {
	rsp := &Empty{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.DeleteUser", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetRolesForUser(ctx context.Context, req *UserRoleRequest, opts ...client.CallOption) (*ArrayReply, error) {
	rsp := &ArrayReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetRolesForUser", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetImplicitRolesForUser(ctx context.Context, req *UserRoleRequest, opts ...client.CallOption) (*ArrayReply, error) {
	rsp := &ArrayReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetImplicitRolesForUser", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetUsersForRole(ctx context.Context, req *UserRoleRequest, opts ...client.CallOption) (*ArrayReply, error) {
	rsp := &ArrayReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetUsersForRole", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetPermissionsForUser(ctx context.Context, req *PermissionRequest, opts ...client.CallOption) (*Array2DReply, error) {
	rsp := &Array2DReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetPermissionsForUser", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *casbinService) GetImplicitPermissionsForUser(ctx context.Context, req *PermissionRequest, opts ...client.CallOption) (*Array2DReply, error) {
	rsp := &Array2DReply{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Casbin.GetImplicitPermissionsForUser", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// Server API for Casbin service

type CasbinHandler interface {
	Enforce(context.Context, *EnforceRequest, *Empty) error
	ImportPolicy(context.Context, *ImportPolicyRequest, *Empty) error
	LoadPolicy(context.Context, *Empty, *Empty) error
	SavePolicy(context.Context, *Empty, *Empty) error
	AddPolicy(context.Context, *PolicyRequest, *Empty) error
	AddNamedPolicy(context.Context, *PolicyRequest, *Empty) error
	RemovePolicy(context.Context, *PolicyRequest, *Empty) error
	RemoveNamedPolicy(context.Context, *PolicyRequest, *Empty) error
	RemoveFilteredPolicy(context.Context, *FilteredPolicyRequest, *Empty) error
	RemoveFilteredNamedPolicy(context.Context, *FilteredPolicyRequest, *Empty) error
	GetPolicy(context.Context, *Empty, *Array2DReply) error
	GetNamedPolicy(context.Context, *PolicyRequest, *Array2DReply) error
	GetFilteredPolicy(context.Context, *FilteredPolicyRequest, *Array2DReply) error
	GetFilteredNamedPolicy(context.Context, *FilteredPolicyRequest, *Array2DReply) error
	AddGroupingPolicy(context.Context, *PolicyRequest, *Empty) error
	AddNamedGroupingPolicy(context.Context, *PolicyRequest, *Empty) error
	RemoveGroupingPolicy(context.Context, *PolicyRequest, *Empty) error
	RemoveNamedGroupingPolicy(context.Context, *PolicyRequest, *Empty) error
	RemoveFilteredGroupingPolicy(context.Context, *FilteredPolicyRequest, *Empty) error
	RemoveFilteredNamedGroupingPolicy(context.Context, *FilteredPolicyRequest, *Empty) error
	GetGroupingPolicy(context.Context, *Empty, *Array2DReply) error
	GetNamedGroupingPolicy(context.Context, *PolicyRequest, *Array2DReply) error
	GetFilteredGroupingPolicy(context.Context, *FilteredPolicyRequest, *Array2DReply) error
	GetFilteredNamedGroupingPolicy(context.Context, *FilteredPolicyRequest, *Array2DReply) error
	GetAllSubjects(context.Context, *Empty, *ArrayReply) error
	GetAllNamedSubjects(context.Context, *SimpleGetRequest, *ArrayReply) error
	GetAllObjects(context.Context, *Empty, *ArrayReply) error
	GetAllNamedObjects(context.Context, *SimpleGetRequest, *ArrayReply) error
	GetAllActions(context.Context, *Empty, *ArrayReply) error
	GetAllNamedActions(context.Context, *SimpleGetRequest, *ArrayReply) error
	GetAllRoles(context.Context, *Empty, *ArrayReply) error
	GetAllNamedRoles(context.Context, *SimpleGetRequest, *ArrayReply) error
	HasPolicy(context.Context, *PolicyRequest, *Empty) error
	HasNamedPolicy(context.Context, *PolicyRequest, *Empty) error
	HasGroupingPolicy(context.Context, *PolicyRequest, *Empty) error
	HasNamedGroupingPolicy(context.Context, *PolicyRequest, *Empty) error
	AddRoleForUser(context.Context, *UserRoleRequest, *Empty) error
	DeleteRoleForUser(context.Context, *UserRoleRequest, *Empty) error
	DeleteUser(context.Context, *UserRoleRequest, *Empty) error
	GetRolesForUser(context.Context, *UserRoleRequest, *ArrayReply) error
	GetImplicitRolesForUser(context.Context, *UserRoleRequest, *ArrayReply) error
	GetUsersForRole(context.Context, *UserRoleRequest, *ArrayReply) error
	GetPermissionsForUser(context.Context, *PermissionRequest, *Array2DReply) error
	GetImplicitPermissionsForUser(context.Context, *PermissionRequest, *Array2DReply) error
}

func RegisterCasbinHandler(s server.Server, hdlr CasbinHandler, opts ...server.HandlerOption) error {
	type casbin interface {
		Enforce(ctx context.Context, req *EnforceRequest, rsp *Empty) error
		ImportPolicy(ctx context.Context, req *ImportPolicyRequest, rsp *Empty) error
		LoadPolicy(ctx context.Context, req *Empty, rsp *Empty) error
		SavePolicy(ctx context.Context, req *Empty, rsp *Empty) error
		AddPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error
		AddNamedPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error
		RemovePolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error
		RemoveNamedPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error
		RemoveFilteredPolicy(ctx context.Context, req *FilteredPolicyRequest, rsp *Empty) error
		RemoveFilteredNamedPolicy(ctx context.Context, req *FilteredPolicyRequest, rsp *Empty) error
		GetPolicy(ctx context.Context, req *Empty, rsp *Array2DReply) error
		GetNamedPolicy(ctx context.Context, req *PolicyRequest, rsp *Array2DReply) error
		GetFilteredPolicy(ctx context.Context, req *FilteredPolicyRequest, rsp *Array2DReply) error
		GetFilteredNamedPolicy(ctx context.Context, req *FilteredPolicyRequest, rsp *Array2DReply) error
		AddGroupingPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error
		AddNamedGroupingPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error
		RemoveGroupingPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error
		RemoveNamedGroupingPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error
		RemoveFilteredGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest, rsp *Empty) error
		RemoveFilteredNamedGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest, rsp *Empty) error
		GetGroupingPolicy(ctx context.Context, req *Empty, rsp *Array2DReply) error
		GetNamedGroupingPolicy(ctx context.Context, req *PolicyRequest, rsp *Array2DReply) error
		GetFilteredGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest, rsp *Array2DReply) error
		GetFilteredNamedGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest, rsp *Array2DReply) error
		GetAllSubjects(ctx context.Context, req *Empty, rsp *ArrayReply) error
		GetAllNamedSubjects(ctx context.Context, req *SimpleGetRequest, rsp *ArrayReply) error
		GetAllObjects(ctx context.Context, req *Empty, rsp *ArrayReply) error
		GetAllNamedObjects(ctx context.Context, req *SimpleGetRequest, rsp *ArrayReply) error
		GetAllActions(ctx context.Context, req *Empty, rsp *ArrayReply) error
		GetAllNamedActions(ctx context.Context, req *SimpleGetRequest, rsp *ArrayReply) error
		GetAllRoles(ctx context.Context, req *Empty, rsp *ArrayReply) error
		GetAllNamedRoles(ctx context.Context, req *SimpleGetRequest, rsp *ArrayReply) error
		HasPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error
		HasNamedPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error
		HasGroupingPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error
		HasNamedGroupingPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error
		AddRoleForUser(ctx context.Context, req *UserRoleRequest, rsp *Empty) error
		DeleteRoleForUser(ctx context.Context, req *UserRoleRequest, rsp *Empty) error
		DeleteUser(ctx context.Context, req *UserRoleRequest, rsp *Empty) error
		GetRolesForUser(ctx context.Context, req *UserRoleRequest, rsp *ArrayReply) error
		GetImplicitRolesForUser(ctx context.Context, req *UserRoleRequest, rsp *ArrayReply) error
		GetUsersForRole(ctx context.Context, req *UserRoleRequest, rsp *ArrayReply) error
		GetPermissionsForUser(ctx context.Context, req *PermissionRequest, rsp *Array2DReply) error
		GetImplicitPermissionsForUser(ctx context.Context, req *PermissionRequest, rsp *Array2DReply) error
	}
	type Casbin struct {
		casbin
	}
	h := &casbinHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.Enforce",
		Path:    []string{"/casbin/enforce"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.ImportPolicy",
		Path:    []string{"/casbin/import_policy"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.LoadPolicy",
		Path:    []string{"/casbin/load_policy"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.SavePolicy",
		Path:    []string{"/casbin/save_policy"},
		Method:  []string{"PUT"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.AddPolicy",
		Path:    []string{"/casbin/add_policy"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.AddNamedPolicy",
		Path:    []string{"/casbin/add_named_policy"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.RemovePolicy",
		Path:    []string{"/casbin/remove_policy"},
		Method:  []string{"DELETE"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.RemoveNamedPolicy",
		Path:    []string{"/casbin/remove_named_policy"},
		Method:  []string{"DELETE"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.RemoveFilteredPolicy",
		Path:    []string{"/casbin/remove_filtered_policy"},
		Method:  []string{"DELETE"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.RemoveFilteredNamedPolicy",
		Path:    []string{"/casbin/remove_filtered_named_policy"},
		Method:  []string{"DELETE"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetPolicy",
		Path:    []string{"/casbin/get_policy"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetNamedPolicy",
		Path:    []string{"/casbin/get_named_policy"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetFilteredPolicy",
		Path:    []string{"/casbin/get_filtered_policy"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetFilteredNamedPolicy",
		Path:    []string{"/casbin/get_filtered_named_policy"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.AddGroupingPolicy",
		Path:    []string{"/casbin/add_grouping_policy"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.AddNamedGroupingPolicy",
		Path:    []string{"/casbin/add_named_grouping_policy"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.RemoveGroupingPolicy",
		Path:    []string{"/casbin/remove_grouping_policy"},
		Method:  []string{"DELETE"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.RemoveNamedGroupingPolicy",
		Path:    []string{"/casbin/remove_named_grouping_policy"},
		Method:  []string{"DELETE"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.RemoveFilteredGroupingPolicy",
		Path:    []string{"/casbin/remove_filtered_grouping_policy"},
		Method:  []string{"DELETE"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.RemoveFilteredNamedGroupingPolicy",
		Path:    []string{"/casbin/remove_filtered_named_grouping_policy"},
		Method:  []string{"DELETE"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetGroupingPolicy",
		Path:    []string{"/casbin/get_grouping_policy"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetNamedGroupingPolicy",
		Path:    []string{"/casbin/get_named_grouping_policy"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetFilteredGroupingPolicy",
		Path:    []string{"/casbin/get_filtered_grouping_policy"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetFilteredNamedGroupingPolicy",
		Path:    []string{"/casbin/get_filtered_named_grouping_policy"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetAllSubjects",
		Path:    []string{"/casbin/get_all_subjects"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetAllNamedSubjects",
		Path:    []string{"/casbin/get_all_named_subjects"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetAllObjects",
		Path:    []string{"/casbin/get_all_objects"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetAllNamedObjects",
		Path:    []string{"/casbin/get_all_named_objects"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetAllActions",
		Path:    []string{"/casbin/get_all_actions"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetAllNamedActions",
		Path:    []string{"/casbin/get_all_named_actions"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetAllRoles",
		Path:    []string{"/casbin/get_all_roles"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetAllNamedRoles",
		Path:    []string{"/casbin/get_all_named_roles"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.HasPolicy",
		Path:    []string{"/casbin/has_policy"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.HasNamedPolicy",
		Path:    []string{"/casbin/has_named_policy"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.HasGroupingPolicy",
		Path:    []string{"/casbin/has_grouping_policy"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.HasNamedGroupingPolicy",
		Path:    []string{"/casbin/has_named_grouping_policy"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.AddRoleForUser",
		Path:    []string{"/casbin/add_role_for_user"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.DeleteRoleForUser",
		Path:    []string{"/casbin/delete_role_for_user"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.DeleteUser",
		Path:    []string{"/casbin/delete_user"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetRolesForUser",
		Path:    []string{"/casbin/get_roles_for_user"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetImplicitRolesForUser",
		Path:    []string{"/casbin/get_implicit_roles_for_user"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetUsersForRole",
		Path:    []string{"/casbin/get_users_for_role"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetPermissionsForUser",
		Path:    []string{"/casbin/get_permissions_for_user"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Casbin.GetImplicitPermissionsForUser",
		Path:    []string{"/casbin/get_implicit_permissions_for_user"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&Casbin{h}, opts...))
}

type casbinHandler struct {
	CasbinHandler
}

func (h *casbinHandler) Enforce(ctx context.Context, req *EnforceRequest, rsp *Empty) error {
	return h.CasbinHandler.Enforce(ctx, req, rsp)
}

func (h *casbinHandler) ImportPolicy(ctx context.Context, req *ImportPolicyRequest, rsp *Empty) error {
	return h.CasbinHandler.ImportPolicy(ctx, req, rsp)
}

func (h *casbinHandler) LoadPolicy(ctx context.Context, req *Empty, rsp *Empty) error {
	return h.CasbinHandler.LoadPolicy(ctx, req, rsp)
}

func (h *casbinHandler) SavePolicy(ctx context.Context, req *Empty, rsp *Empty) error {
	return h.CasbinHandler.SavePolicy(ctx, req, rsp)
}

func (h *casbinHandler) AddPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error {
	return h.CasbinHandler.AddPolicy(ctx, req, rsp)
}

func (h *casbinHandler) AddNamedPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error {
	return h.CasbinHandler.AddNamedPolicy(ctx, req, rsp)
}

func (h *casbinHandler) RemovePolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error {
	return h.CasbinHandler.RemovePolicy(ctx, req, rsp)
}

func (h *casbinHandler) RemoveNamedPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error {
	return h.CasbinHandler.RemoveNamedPolicy(ctx, req, rsp)
}

func (h *casbinHandler) RemoveFilteredPolicy(ctx context.Context, req *FilteredPolicyRequest, rsp *Empty) error {
	return h.CasbinHandler.RemoveFilteredPolicy(ctx, req, rsp)
}

func (h *casbinHandler) RemoveFilteredNamedPolicy(ctx context.Context, req *FilteredPolicyRequest, rsp *Empty) error {
	return h.CasbinHandler.RemoveFilteredNamedPolicy(ctx, req, rsp)
}

func (h *casbinHandler) GetPolicy(ctx context.Context, req *Empty, rsp *Array2DReply) error {
	return h.CasbinHandler.GetPolicy(ctx, req, rsp)
}

func (h *casbinHandler) GetNamedPolicy(ctx context.Context, req *PolicyRequest, rsp *Array2DReply) error {
	return h.CasbinHandler.GetNamedPolicy(ctx, req, rsp)
}

func (h *casbinHandler) GetFilteredPolicy(ctx context.Context, req *FilteredPolicyRequest, rsp *Array2DReply) error {
	return h.CasbinHandler.GetFilteredPolicy(ctx, req, rsp)
}

func (h *casbinHandler) GetFilteredNamedPolicy(ctx context.Context, req *FilteredPolicyRequest, rsp *Array2DReply) error {
	return h.CasbinHandler.GetFilteredNamedPolicy(ctx, req, rsp)
}

func (h *casbinHandler) AddGroupingPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error {
	return h.CasbinHandler.AddGroupingPolicy(ctx, req, rsp)
}

func (h *casbinHandler) AddNamedGroupingPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error {
	return h.CasbinHandler.AddNamedGroupingPolicy(ctx, req, rsp)
}

func (h *casbinHandler) RemoveGroupingPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error {
	return h.CasbinHandler.RemoveGroupingPolicy(ctx, req, rsp)
}

func (h *casbinHandler) RemoveNamedGroupingPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error {
	return h.CasbinHandler.RemoveNamedGroupingPolicy(ctx, req, rsp)
}

func (h *casbinHandler) RemoveFilteredGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest, rsp *Empty) error {
	return h.CasbinHandler.RemoveFilteredGroupingPolicy(ctx, req, rsp)
}

func (h *casbinHandler) RemoveFilteredNamedGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest, rsp *Empty) error {
	return h.CasbinHandler.RemoveFilteredNamedGroupingPolicy(ctx, req, rsp)
}

func (h *casbinHandler) GetGroupingPolicy(ctx context.Context, req *Empty, rsp *Array2DReply) error {
	return h.CasbinHandler.GetGroupingPolicy(ctx, req, rsp)
}

func (h *casbinHandler) GetNamedGroupingPolicy(ctx context.Context, req *PolicyRequest, rsp *Array2DReply) error {
	return h.CasbinHandler.GetNamedGroupingPolicy(ctx, req, rsp)
}

func (h *casbinHandler) GetFilteredGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest, rsp *Array2DReply) error {
	return h.CasbinHandler.GetFilteredGroupingPolicy(ctx, req, rsp)
}

func (h *casbinHandler) GetFilteredNamedGroupingPolicy(ctx context.Context, req *FilteredPolicyRequest, rsp *Array2DReply) error {
	return h.CasbinHandler.GetFilteredNamedGroupingPolicy(ctx, req, rsp)
}

func (h *casbinHandler) GetAllSubjects(ctx context.Context, req *Empty, rsp *ArrayReply) error {
	return h.CasbinHandler.GetAllSubjects(ctx, req, rsp)
}

func (h *casbinHandler) GetAllNamedSubjects(ctx context.Context, req *SimpleGetRequest, rsp *ArrayReply) error {
	return h.CasbinHandler.GetAllNamedSubjects(ctx, req, rsp)
}

func (h *casbinHandler) GetAllObjects(ctx context.Context, req *Empty, rsp *ArrayReply) error {
	return h.CasbinHandler.GetAllObjects(ctx, req, rsp)
}

func (h *casbinHandler) GetAllNamedObjects(ctx context.Context, req *SimpleGetRequest, rsp *ArrayReply) error {
	return h.CasbinHandler.GetAllNamedObjects(ctx, req, rsp)
}

func (h *casbinHandler) GetAllActions(ctx context.Context, req *Empty, rsp *ArrayReply) error {
	return h.CasbinHandler.GetAllActions(ctx, req, rsp)
}

func (h *casbinHandler) GetAllNamedActions(ctx context.Context, req *SimpleGetRequest, rsp *ArrayReply) error {
	return h.CasbinHandler.GetAllNamedActions(ctx, req, rsp)
}

func (h *casbinHandler) GetAllRoles(ctx context.Context, req *Empty, rsp *ArrayReply) error {
	return h.CasbinHandler.GetAllRoles(ctx, req, rsp)
}

func (h *casbinHandler) GetAllNamedRoles(ctx context.Context, req *SimpleGetRequest, rsp *ArrayReply) error {
	return h.CasbinHandler.GetAllNamedRoles(ctx, req, rsp)
}

func (h *casbinHandler) HasPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error {
	return h.CasbinHandler.HasPolicy(ctx, req, rsp)
}

func (h *casbinHandler) HasNamedPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error {
	return h.CasbinHandler.HasNamedPolicy(ctx, req, rsp)
}

func (h *casbinHandler) HasGroupingPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error {
	return h.CasbinHandler.HasGroupingPolicy(ctx, req, rsp)
}

func (h *casbinHandler) HasNamedGroupingPolicy(ctx context.Context, req *PolicyRequest, rsp *Empty) error {
	return h.CasbinHandler.HasNamedGroupingPolicy(ctx, req, rsp)
}

func (h *casbinHandler) AddRoleForUser(ctx context.Context, req *UserRoleRequest, rsp *Empty) error {
	return h.CasbinHandler.AddRoleForUser(ctx, req, rsp)
}

func (h *casbinHandler) DeleteRoleForUser(ctx context.Context, req *UserRoleRequest, rsp *Empty) error {
	return h.CasbinHandler.DeleteRoleForUser(ctx, req, rsp)
}

func (h *casbinHandler) DeleteUser(ctx context.Context, req *UserRoleRequest, rsp *Empty) error {
	return h.CasbinHandler.DeleteUser(ctx, req, rsp)
}

func (h *casbinHandler) GetRolesForUser(ctx context.Context, req *UserRoleRequest, rsp *ArrayReply) error {
	return h.CasbinHandler.GetRolesForUser(ctx, req, rsp)
}

func (h *casbinHandler) GetImplicitRolesForUser(ctx context.Context, req *UserRoleRequest, rsp *ArrayReply) error {
	return h.CasbinHandler.GetImplicitRolesForUser(ctx, req, rsp)
}

func (h *casbinHandler) GetUsersForRole(ctx context.Context, req *UserRoleRequest, rsp *ArrayReply) error {
	return h.CasbinHandler.GetUsersForRole(ctx, req, rsp)
}

func (h *casbinHandler) GetPermissionsForUser(ctx context.Context, req *PermissionRequest, rsp *Array2DReply) error {
	return h.CasbinHandler.GetPermissionsForUser(ctx, req, rsp)
}

func (h *casbinHandler) GetImplicitPermissionsForUser(ctx context.Context, req *PermissionRequest, rsp *Array2DReply) error {
	return h.CasbinHandler.GetImplicitPermissionsForUser(ctx, req, rsp)
}
