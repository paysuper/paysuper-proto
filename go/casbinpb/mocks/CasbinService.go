// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	client "github.com/micro/go-micro/client"
	casbinpb "github.com/paysuper/paysuper-proto/go/casbinpb"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CasbinService is an autogenerated mock type for the CasbinService type
type CasbinService struct {
	mock.Mock
}

// AddGroupingPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) AddGroupingPolicy(ctx context.Context, in *casbinpb.PolicyRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddNamedGroupingPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) AddNamedGroupingPolicy(ctx context.Context, in *casbinpb.PolicyRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddNamedPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) AddNamedPolicy(ctx context.Context, in *casbinpb.PolicyRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) AddPolicy(ctx context.Context, in *casbinpb.PolicyRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddRoleForUser provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) AddRoleForUser(ctx context.Context, in *casbinpb.UserRoleRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.UserRoleRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.UserRoleRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoleForUser provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) DeleteRoleForUser(ctx context.Context, in *casbinpb.UserRoleRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.UserRoleRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.UserRoleRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) DeleteUser(ctx context.Context, in *casbinpb.UserRoleRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.UserRoleRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.UserRoleRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Enforce provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) Enforce(ctx context.Context, in *casbinpb.EnforceRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.EnforceRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.EnforceRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllActions provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetAllActions(ctx context.Context, in *casbinpb.Empty, opts ...client.CallOption) (*casbinpb.ArrayReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.ArrayReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.Empty, ...client.CallOption) *casbinpb.ArrayReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.ArrayReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.Empty, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllNamedActions provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetAllNamedActions(ctx context.Context, in *casbinpb.SimpleGetRequest, opts ...client.CallOption) (*casbinpb.ArrayReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.ArrayReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.SimpleGetRequest, ...client.CallOption) *casbinpb.ArrayReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.ArrayReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.SimpleGetRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllNamedObjects provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetAllNamedObjects(ctx context.Context, in *casbinpb.SimpleGetRequest, opts ...client.CallOption) (*casbinpb.ArrayReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.ArrayReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.SimpleGetRequest, ...client.CallOption) *casbinpb.ArrayReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.ArrayReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.SimpleGetRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllNamedRoles provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetAllNamedRoles(ctx context.Context, in *casbinpb.SimpleGetRequest, opts ...client.CallOption) (*casbinpb.ArrayReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.ArrayReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.SimpleGetRequest, ...client.CallOption) *casbinpb.ArrayReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.ArrayReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.SimpleGetRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllNamedSubjects provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetAllNamedSubjects(ctx context.Context, in *casbinpb.SimpleGetRequest, opts ...client.CallOption) (*casbinpb.ArrayReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.ArrayReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.SimpleGetRequest, ...client.CallOption) *casbinpb.ArrayReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.ArrayReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.SimpleGetRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllObjects provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetAllObjects(ctx context.Context, in *casbinpb.Empty, opts ...client.CallOption) (*casbinpb.ArrayReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.ArrayReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.Empty, ...client.CallOption) *casbinpb.ArrayReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.ArrayReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.Empty, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllRoles provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetAllRoles(ctx context.Context, in *casbinpb.Empty, opts ...client.CallOption) (*casbinpb.ArrayReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.ArrayReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.Empty, ...client.CallOption) *casbinpb.ArrayReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.ArrayReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.Empty, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSubjects provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetAllSubjects(ctx context.Context, in *casbinpb.Empty, opts ...client.CallOption) (*casbinpb.ArrayReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.ArrayReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.Empty, ...client.CallOption) *casbinpb.ArrayReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.ArrayReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.Empty, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilteredGroupingPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetFilteredGroupingPolicy(ctx context.Context, in *casbinpb.FilteredPolicyRequest, opts ...client.CallOption) (*casbinpb.Array2DReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Array2DReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.FilteredPolicyRequest, ...client.CallOption) *casbinpb.Array2DReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Array2DReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.FilteredPolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilteredNamedGroupingPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetFilteredNamedGroupingPolicy(ctx context.Context, in *casbinpb.FilteredPolicyRequest, opts ...client.CallOption) (*casbinpb.Array2DReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Array2DReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.FilteredPolicyRequest, ...client.CallOption) *casbinpb.Array2DReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Array2DReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.FilteredPolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilteredNamedPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetFilteredNamedPolicy(ctx context.Context, in *casbinpb.FilteredPolicyRequest, opts ...client.CallOption) (*casbinpb.Array2DReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Array2DReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.FilteredPolicyRequest, ...client.CallOption) *casbinpb.Array2DReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Array2DReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.FilteredPolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilteredPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetFilteredPolicy(ctx context.Context, in *casbinpb.FilteredPolicyRequest, opts ...client.CallOption) (*casbinpb.Array2DReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Array2DReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.FilteredPolicyRequest, ...client.CallOption) *casbinpb.Array2DReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Array2DReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.FilteredPolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupingPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetGroupingPolicy(ctx context.Context, in *casbinpb.Empty, opts ...client.CallOption) (*casbinpb.Array2DReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Array2DReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.Empty, ...client.CallOption) *casbinpb.Array2DReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Array2DReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.Empty, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImplicitPermissionsForUser provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetImplicitPermissionsForUser(ctx context.Context, in *casbinpb.PermissionRequest, opts ...client.CallOption) (*casbinpb.Array2DReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Array2DReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PermissionRequest, ...client.CallOption) *casbinpb.Array2DReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Array2DReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.PermissionRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImplicitRolesForUser provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetImplicitRolesForUser(ctx context.Context, in *casbinpb.UserRoleRequest, opts ...client.CallOption) (*casbinpb.ArrayReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.ArrayReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.UserRoleRequest, ...client.CallOption) *casbinpb.ArrayReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.ArrayReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.UserRoleRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamedGroupingPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetNamedGroupingPolicy(ctx context.Context, in *casbinpb.PolicyRequest, opts ...client.CallOption) (*casbinpb.Array2DReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Array2DReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) *casbinpb.Array2DReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Array2DReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamedPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetNamedPolicy(ctx context.Context, in *casbinpb.PolicyRequest, opts ...client.CallOption) (*casbinpb.Array2DReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Array2DReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) *casbinpb.Array2DReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Array2DReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissionsForUser provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetPermissionsForUser(ctx context.Context, in *casbinpb.PermissionRequest, opts ...client.CallOption) (*casbinpb.Array2DReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Array2DReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PermissionRequest, ...client.CallOption) *casbinpb.Array2DReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Array2DReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.PermissionRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetPolicy(ctx context.Context, in *casbinpb.Empty, opts ...client.CallOption) (*casbinpb.Array2DReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Array2DReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.Empty, ...client.CallOption) *casbinpb.Array2DReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Array2DReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.Empty, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRolesForUser provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetRolesForUser(ctx context.Context, in *casbinpb.UserRoleRequest, opts ...client.CallOption) (*casbinpb.ArrayReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.ArrayReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.UserRoleRequest, ...client.CallOption) *casbinpb.ArrayReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.ArrayReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.UserRoleRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersForRole provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) GetUsersForRole(ctx context.Context, in *casbinpb.UserRoleRequest, opts ...client.CallOption) (*casbinpb.ArrayReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.ArrayReply
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.UserRoleRequest, ...client.CallOption) *casbinpb.ArrayReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.ArrayReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.UserRoleRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasGroupingPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) HasGroupingPolicy(ctx context.Context, in *casbinpb.PolicyRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasNamedGroupingPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) HasNamedGroupingPolicy(ctx context.Context, in *casbinpb.PolicyRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasNamedPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) HasNamedPolicy(ctx context.Context, in *casbinpb.PolicyRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) HasPolicy(ctx context.Context, in *casbinpb.PolicyRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) ImportPolicy(ctx context.Context, in *casbinpb.ImportPolicyRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.ImportPolicyRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.ImportPolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) LoadPolicy(ctx context.Context, in *casbinpb.Empty, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.Empty, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.Empty, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFilteredGroupingPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) RemoveFilteredGroupingPolicy(ctx context.Context, in *casbinpb.FilteredPolicyRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.FilteredPolicyRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.FilteredPolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFilteredNamedGroupingPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) RemoveFilteredNamedGroupingPolicy(ctx context.Context, in *casbinpb.FilteredPolicyRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.FilteredPolicyRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.FilteredPolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFilteredNamedPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) RemoveFilteredNamedPolicy(ctx context.Context, in *casbinpb.FilteredPolicyRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.FilteredPolicyRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.FilteredPolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFilteredPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) RemoveFilteredPolicy(ctx context.Context, in *casbinpb.FilteredPolicyRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.FilteredPolicyRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.FilteredPolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveGroupingPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) RemoveGroupingPolicy(ctx context.Context, in *casbinpb.PolicyRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveNamedGroupingPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) RemoveNamedGroupingPolicy(ctx context.Context, in *casbinpb.PolicyRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveNamedPolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) RemoveNamedPolicy(ctx context.Context, in *casbinpb.PolicyRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) RemovePolicy(ctx context.Context, in *casbinpb.PolicyRequest, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.PolicyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SavePolicy provides a mock function with given fields: ctx, in, opts
func (_m *CasbinService) SavePolicy(ctx context.Context, in *casbinpb.Empty, opts ...client.CallOption) (*casbinpb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *casbinpb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.Empty, ...client.CallOption) *casbinpb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*casbinpb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *casbinpb.Empty, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
