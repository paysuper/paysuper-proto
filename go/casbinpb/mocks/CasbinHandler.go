// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	casbinpb "github.com/paysuper/paysuper-proto/go/casbinpb"

	mock "github.com/stretchr/testify/mock"
)

// CasbinHandler is an autogenerated mock type for the CasbinHandler type
type CasbinHandler struct {
	mock.Mock
}

// AddGroupingPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) AddGroupingPolicy(_a0 context.Context, _a1 *casbinpb.PolicyRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddNamedGroupingPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) AddNamedGroupingPolicy(_a0 context.Context, _a1 *casbinpb.PolicyRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddNamedPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) AddNamedPolicy(_a0 context.Context, _a1 *casbinpb.PolicyRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) AddPolicy(_a0 context.Context, _a1 *casbinpb.PolicyRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddRoleForUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) AddRoleForUser(_a0 context.Context, _a1 *casbinpb.UserRoleRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.UserRoleRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRoleForUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) DeleteRoleForUser(_a0 context.Context, _a1 *casbinpb.UserRoleRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.UserRoleRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) DeleteUser(_a0 context.Context, _a1 *casbinpb.UserRoleRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.UserRoleRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Enforce provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) Enforce(_a0 context.Context, _a1 *casbinpb.EnforceRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.EnforceRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllActions provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetAllActions(_a0 context.Context, _a1 *casbinpb.Empty, _a2 *casbinpb.ArrayReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.Empty, *casbinpb.ArrayReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllNamedActions provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetAllNamedActions(_a0 context.Context, _a1 *casbinpb.SimpleGetRequest, _a2 *casbinpb.ArrayReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.SimpleGetRequest, *casbinpb.ArrayReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllNamedObjects provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetAllNamedObjects(_a0 context.Context, _a1 *casbinpb.SimpleGetRequest, _a2 *casbinpb.ArrayReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.SimpleGetRequest, *casbinpb.ArrayReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllNamedRoles provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetAllNamedRoles(_a0 context.Context, _a1 *casbinpb.SimpleGetRequest, _a2 *casbinpb.ArrayReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.SimpleGetRequest, *casbinpb.ArrayReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllNamedSubjects provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetAllNamedSubjects(_a0 context.Context, _a1 *casbinpb.SimpleGetRequest, _a2 *casbinpb.ArrayReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.SimpleGetRequest, *casbinpb.ArrayReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllObjects provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetAllObjects(_a0 context.Context, _a1 *casbinpb.Empty, _a2 *casbinpb.ArrayReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.Empty, *casbinpb.ArrayReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllRoles provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetAllRoles(_a0 context.Context, _a1 *casbinpb.Empty, _a2 *casbinpb.ArrayReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.Empty, *casbinpb.ArrayReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllSubjects provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetAllSubjects(_a0 context.Context, _a1 *casbinpb.Empty, _a2 *casbinpb.ArrayReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.Empty, *casbinpb.ArrayReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFilteredGroupingPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetFilteredGroupingPolicy(_a0 context.Context, _a1 *casbinpb.FilteredPolicyRequest, _a2 *casbinpb.Array2DReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.FilteredPolicyRequest, *casbinpb.Array2DReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFilteredNamedGroupingPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetFilteredNamedGroupingPolicy(_a0 context.Context, _a1 *casbinpb.FilteredPolicyRequest, _a2 *casbinpb.Array2DReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.FilteredPolicyRequest, *casbinpb.Array2DReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFilteredNamedPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetFilteredNamedPolicy(_a0 context.Context, _a1 *casbinpb.FilteredPolicyRequest, _a2 *casbinpb.Array2DReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.FilteredPolicyRequest, *casbinpb.Array2DReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFilteredPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetFilteredPolicy(_a0 context.Context, _a1 *casbinpb.FilteredPolicyRequest, _a2 *casbinpb.Array2DReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.FilteredPolicyRequest, *casbinpb.Array2DReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGroupingPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetGroupingPolicy(_a0 context.Context, _a1 *casbinpb.Empty, _a2 *casbinpb.Array2DReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.Empty, *casbinpb.Array2DReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetImplicitPermissionsForUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetImplicitPermissionsForUser(_a0 context.Context, _a1 *casbinpb.PermissionRequest, _a2 *casbinpb.Array2DReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PermissionRequest, *casbinpb.Array2DReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetImplicitRolesForUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetImplicitRolesForUser(_a0 context.Context, _a1 *casbinpb.UserRoleRequest, _a2 *casbinpb.ArrayReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.UserRoleRequest, *casbinpb.ArrayReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNamedGroupingPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetNamedGroupingPolicy(_a0 context.Context, _a1 *casbinpb.PolicyRequest, _a2 *casbinpb.Array2DReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, *casbinpb.Array2DReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNamedPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetNamedPolicy(_a0 context.Context, _a1 *casbinpb.PolicyRequest, _a2 *casbinpb.Array2DReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, *casbinpb.Array2DReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPermissionsForUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetPermissionsForUser(_a0 context.Context, _a1 *casbinpb.PermissionRequest, _a2 *casbinpb.Array2DReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PermissionRequest, *casbinpb.Array2DReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetPolicy(_a0 context.Context, _a1 *casbinpb.Empty, _a2 *casbinpb.Array2DReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.Empty, *casbinpb.Array2DReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRolesForUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetRolesForUser(_a0 context.Context, _a1 *casbinpb.UserRoleRequest, _a2 *casbinpb.ArrayReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.UserRoleRequest, *casbinpb.ArrayReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUsersForRole provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) GetUsersForRole(_a0 context.Context, _a1 *casbinpb.UserRoleRequest, _a2 *casbinpb.ArrayReply) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.UserRoleRequest, *casbinpb.ArrayReply) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HasGroupingPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) HasGroupingPolicy(_a0 context.Context, _a1 *casbinpb.PolicyRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HasNamedGroupingPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) HasNamedGroupingPolicy(_a0 context.Context, _a1 *casbinpb.PolicyRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HasNamedPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) HasNamedPolicy(_a0 context.Context, _a1 *casbinpb.PolicyRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HasPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) HasPolicy(_a0 context.Context, _a1 *casbinpb.PolicyRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ImportPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) ImportPolicy(_a0 context.Context, _a1 *casbinpb.ImportPolicyRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.ImportPolicyRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) LoadPolicy(_a0 context.Context, _a1 *casbinpb.Empty, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.Empty, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveFilteredGroupingPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) RemoveFilteredGroupingPolicy(_a0 context.Context, _a1 *casbinpb.FilteredPolicyRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.FilteredPolicyRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveFilteredNamedGroupingPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) RemoveFilteredNamedGroupingPolicy(_a0 context.Context, _a1 *casbinpb.FilteredPolicyRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.FilteredPolicyRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveFilteredNamedPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) RemoveFilteredNamedPolicy(_a0 context.Context, _a1 *casbinpb.FilteredPolicyRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.FilteredPolicyRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveFilteredPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) RemoveFilteredPolicy(_a0 context.Context, _a1 *casbinpb.FilteredPolicyRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.FilteredPolicyRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveGroupingPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) RemoveGroupingPolicy(_a0 context.Context, _a1 *casbinpb.PolicyRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveNamedGroupingPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) RemoveNamedGroupingPolicy(_a0 context.Context, _a1 *casbinpb.PolicyRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveNamedPolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) RemoveNamedPolicy(_a0 context.Context, _a1 *casbinpb.PolicyRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) RemovePolicy(_a0 context.Context, _a1 *casbinpb.PolicyRequest, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.PolicyRequest, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SavePolicy provides a mock function with given fields: _a0, _a1, _a2
func (_m *CasbinHandler) SavePolicy(_a0 context.Context, _a1 *casbinpb.Empty, _a2 *casbinpb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *casbinpb.Empty, *casbinpb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
