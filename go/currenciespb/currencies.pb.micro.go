// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: currencies.proto

package currenciespb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CurrencyRatesService service

type CurrencyRatesService interface {
	GetRateCurrentCommon(ctx context.Context, in *GetRateCurrentCommonRequest, opts ...client.CallOption) (*RateData, error)
	GetRateByDateCommon(ctx context.Context, in *GetRateByDateCommonRequest, opts ...client.CallOption) (*RateData, error)
	GetRateCurrentForMerchant(ctx context.Context, in *GetRateCurrentForMerchantRequest, opts ...client.CallOption) (*RateData, error)
	GetRateByDateForMerchant(ctx context.Context, in *GetRateByDateForMerchantRequest, opts ...client.CallOption) (*RateData, error)
	ExchangeCurrencyCurrentCommon(ctx context.Context, in *ExchangeCurrencyCurrentCommonRequest, opts ...client.CallOption) (*ExchangeCurrencyResponse, error)
	ExchangeCurrencyCurrentForMerchant(ctx context.Context, in *ExchangeCurrencyCurrentForMerchantRequest, opts ...client.CallOption) (*ExchangeCurrencyResponse, error)
	ExchangeCurrencyByDateCommon(ctx context.Context, in *ExchangeCurrencyByDateCommonRequest, opts ...client.CallOption) (*ExchangeCurrencyResponse, error)
	ExchangeCurrencyByDateForMerchant(ctx context.Context, in *ExchangeCurrencyByDateForMerchantRequest, opts ...client.CallOption) (*ExchangeCurrencyResponse, error)
	GetCommonRateCorrectionRule(ctx context.Context, in *CommonCorrectionRuleRequest, opts ...client.CallOption) (*CorrectionRule, error)
	GetMerchantRateCorrectionRule(ctx context.Context, in *MerchantCorrectionRuleRequest, opts ...client.CallOption) (*CorrectionRule, error)
	AddCommonRateCorrectionRule(ctx context.Context, in *CommonCorrectionRule, opts ...client.CallOption) (*EmptyResponse, error)
	AddMerchantRateCorrectionRule(ctx context.Context, in *CorrectionRule, opts ...client.CallOption) (*EmptyResponse, error)
	GetSupportedCurrencies(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*CurrenciesList, error)
	GetSettlementCurrencies(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*CurrenciesList, error)
	GetPriceCurrencies(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*CurrenciesList, error)
	GetVatCurrencies(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*CurrenciesList, error)
	GetAccountingCurrencies(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*CurrenciesList, error)
	GetCurrenciesPrecision(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*CurrenciesPrecisionResponse, error)
}

type currencyRatesService struct {
	c    client.Client
	name string
}

func NewCurrencyRatesService(name string, c client.Client) CurrencyRatesService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "currencies"
	}
	return &currencyRatesService{
		c:    c,
		name: name,
	}
}

func (c *currencyRatesService) GetRateCurrentCommon(ctx context.Context, in *GetRateCurrentCommonRequest, opts ...client.CallOption) (*RateData, error) {
	req := c.c.NewRequest(c.name, "CurrencyRatesService.GetRateCurrentCommon", in)
	out := new(RateData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesService) GetRateByDateCommon(ctx context.Context, in *GetRateByDateCommonRequest, opts ...client.CallOption) (*RateData, error) {
	req := c.c.NewRequest(c.name, "CurrencyRatesService.GetRateByDateCommon", in)
	out := new(RateData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesService) GetRateCurrentForMerchant(ctx context.Context, in *GetRateCurrentForMerchantRequest, opts ...client.CallOption) (*RateData, error) {
	req := c.c.NewRequest(c.name, "CurrencyRatesService.GetRateCurrentForMerchant", in)
	out := new(RateData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesService) GetRateByDateForMerchant(ctx context.Context, in *GetRateByDateForMerchantRequest, opts ...client.CallOption) (*RateData, error) {
	req := c.c.NewRequest(c.name, "CurrencyRatesService.GetRateByDateForMerchant", in)
	out := new(RateData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesService) ExchangeCurrencyCurrentCommon(ctx context.Context, in *ExchangeCurrencyCurrentCommonRequest, opts ...client.CallOption) (*ExchangeCurrencyResponse, error) {
	req := c.c.NewRequest(c.name, "CurrencyRatesService.ExchangeCurrencyCurrentCommon", in)
	out := new(ExchangeCurrencyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesService) ExchangeCurrencyCurrentForMerchant(ctx context.Context, in *ExchangeCurrencyCurrentForMerchantRequest, opts ...client.CallOption) (*ExchangeCurrencyResponse, error) {
	req := c.c.NewRequest(c.name, "CurrencyRatesService.ExchangeCurrencyCurrentForMerchant", in)
	out := new(ExchangeCurrencyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesService) ExchangeCurrencyByDateCommon(ctx context.Context, in *ExchangeCurrencyByDateCommonRequest, opts ...client.CallOption) (*ExchangeCurrencyResponse, error) {
	req := c.c.NewRequest(c.name, "CurrencyRatesService.ExchangeCurrencyByDateCommon", in)
	out := new(ExchangeCurrencyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesService) ExchangeCurrencyByDateForMerchant(ctx context.Context, in *ExchangeCurrencyByDateForMerchantRequest, opts ...client.CallOption) (*ExchangeCurrencyResponse, error) {
	req := c.c.NewRequest(c.name, "CurrencyRatesService.ExchangeCurrencyByDateForMerchant", in)
	out := new(ExchangeCurrencyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesService) GetCommonRateCorrectionRule(ctx context.Context, in *CommonCorrectionRuleRequest, opts ...client.CallOption) (*CorrectionRule, error) {
	req := c.c.NewRequest(c.name, "CurrencyRatesService.GetCommonRateCorrectionRule", in)
	out := new(CorrectionRule)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesService) GetMerchantRateCorrectionRule(ctx context.Context, in *MerchantCorrectionRuleRequest, opts ...client.CallOption) (*CorrectionRule, error) {
	req := c.c.NewRequest(c.name, "CurrencyRatesService.GetMerchantRateCorrectionRule", in)
	out := new(CorrectionRule)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesService) AddCommonRateCorrectionRule(ctx context.Context, in *CommonCorrectionRule, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "CurrencyRatesService.AddCommonRateCorrectionRule", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesService) AddMerchantRateCorrectionRule(ctx context.Context, in *CorrectionRule, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "CurrencyRatesService.AddMerchantRateCorrectionRule", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesService) GetSupportedCurrencies(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*CurrenciesList, error) {
	req := c.c.NewRequest(c.name, "CurrencyRatesService.GetSupportedCurrencies", in)
	out := new(CurrenciesList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesService) GetSettlementCurrencies(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*CurrenciesList, error) {
	req := c.c.NewRequest(c.name, "CurrencyRatesService.GetSettlementCurrencies", in)
	out := new(CurrenciesList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesService) GetPriceCurrencies(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*CurrenciesList, error) {
	req := c.c.NewRequest(c.name, "CurrencyRatesService.GetPriceCurrencies", in)
	out := new(CurrenciesList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesService) GetVatCurrencies(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*CurrenciesList, error) {
	req := c.c.NewRequest(c.name, "CurrencyRatesService.GetVatCurrencies", in)
	out := new(CurrenciesList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesService) GetAccountingCurrencies(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*CurrenciesList, error) {
	req := c.c.NewRequest(c.name, "CurrencyRatesService.GetAccountingCurrencies", in)
	out := new(CurrenciesList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRatesService) GetCurrenciesPrecision(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*CurrenciesPrecisionResponse, error) {
	req := c.c.NewRequest(c.name, "CurrencyRatesService.GetCurrenciesPrecision", in)
	out := new(CurrenciesPrecisionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CurrencyRatesService service

type CurrencyRatesServiceHandler interface {
	GetRateCurrentCommon(context.Context, *GetRateCurrentCommonRequest, *RateData) error
	GetRateByDateCommon(context.Context, *GetRateByDateCommonRequest, *RateData) error
	GetRateCurrentForMerchant(context.Context, *GetRateCurrentForMerchantRequest, *RateData) error
	GetRateByDateForMerchant(context.Context, *GetRateByDateForMerchantRequest, *RateData) error
	ExchangeCurrencyCurrentCommon(context.Context, *ExchangeCurrencyCurrentCommonRequest, *ExchangeCurrencyResponse) error
	ExchangeCurrencyCurrentForMerchant(context.Context, *ExchangeCurrencyCurrentForMerchantRequest, *ExchangeCurrencyResponse) error
	ExchangeCurrencyByDateCommon(context.Context, *ExchangeCurrencyByDateCommonRequest, *ExchangeCurrencyResponse) error
	ExchangeCurrencyByDateForMerchant(context.Context, *ExchangeCurrencyByDateForMerchantRequest, *ExchangeCurrencyResponse) error
	GetCommonRateCorrectionRule(context.Context, *CommonCorrectionRuleRequest, *CorrectionRule) error
	GetMerchantRateCorrectionRule(context.Context, *MerchantCorrectionRuleRequest, *CorrectionRule) error
	AddCommonRateCorrectionRule(context.Context, *CommonCorrectionRule, *EmptyResponse) error
	AddMerchantRateCorrectionRule(context.Context, *CorrectionRule, *EmptyResponse) error
	GetSupportedCurrencies(context.Context, *EmptyRequest, *CurrenciesList) error
	GetSettlementCurrencies(context.Context, *EmptyRequest, *CurrenciesList) error
	GetPriceCurrencies(context.Context, *EmptyRequest, *CurrenciesList) error
	GetVatCurrencies(context.Context, *EmptyRequest, *CurrenciesList) error
	GetAccountingCurrencies(context.Context, *EmptyRequest, *CurrenciesList) error
	GetCurrenciesPrecision(context.Context, *EmptyRequest, *CurrenciesPrecisionResponse) error
}

func RegisterCurrencyRatesServiceHandler(s server.Server, hdlr CurrencyRatesServiceHandler, opts ...server.HandlerOption) error {
	type currencyRatesService interface {
		GetRateCurrentCommon(ctx context.Context, in *GetRateCurrentCommonRequest, out *RateData) error
		GetRateByDateCommon(ctx context.Context, in *GetRateByDateCommonRequest, out *RateData) error
		GetRateCurrentForMerchant(ctx context.Context, in *GetRateCurrentForMerchantRequest, out *RateData) error
		GetRateByDateForMerchant(ctx context.Context, in *GetRateByDateForMerchantRequest, out *RateData) error
		ExchangeCurrencyCurrentCommon(ctx context.Context, in *ExchangeCurrencyCurrentCommonRequest, out *ExchangeCurrencyResponse) error
		ExchangeCurrencyCurrentForMerchant(ctx context.Context, in *ExchangeCurrencyCurrentForMerchantRequest, out *ExchangeCurrencyResponse) error
		ExchangeCurrencyByDateCommon(ctx context.Context, in *ExchangeCurrencyByDateCommonRequest, out *ExchangeCurrencyResponse) error
		ExchangeCurrencyByDateForMerchant(ctx context.Context, in *ExchangeCurrencyByDateForMerchantRequest, out *ExchangeCurrencyResponse) error
		GetCommonRateCorrectionRule(ctx context.Context, in *CommonCorrectionRuleRequest, out *CorrectionRule) error
		GetMerchantRateCorrectionRule(ctx context.Context, in *MerchantCorrectionRuleRequest, out *CorrectionRule) error
		AddCommonRateCorrectionRule(ctx context.Context, in *CommonCorrectionRule, out *EmptyResponse) error
		AddMerchantRateCorrectionRule(ctx context.Context, in *CorrectionRule, out *EmptyResponse) error
		GetSupportedCurrencies(ctx context.Context, in *EmptyRequest, out *CurrenciesList) error
		GetSettlementCurrencies(ctx context.Context, in *EmptyRequest, out *CurrenciesList) error
		GetPriceCurrencies(ctx context.Context, in *EmptyRequest, out *CurrenciesList) error
		GetVatCurrencies(ctx context.Context, in *EmptyRequest, out *CurrenciesList) error
		GetAccountingCurrencies(ctx context.Context, in *EmptyRequest, out *CurrenciesList) error
		GetCurrenciesPrecision(ctx context.Context, in *EmptyRequest, out *CurrenciesPrecisionResponse) error
	}
	type CurrencyRatesService struct {
		currencyRatesService
	}
	h := &currencyRatesServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CurrencyRatesService{h}, opts...))
}

type currencyRatesServiceHandler struct {
	CurrencyRatesServiceHandler
}

func (h *currencyRatesServiceHandler) GetRateCurrentCommon(ctx context.Context, in *GetRateCurrentCommonRequest, out *RateData) error {
	return h.CurrencyRatesServiceHandler.GetRateCurrentCommon(ctx, in, out)
}

func (h *currencyRatesServiceHandler) GetRateByDateCommon(ctx context.Context, in *GetRateByDateCommonRequest, out *RateData) error {
	return h.CurrencyRatesServiceHandler.GetRateByDateCommon(ctx, in, out)
}

func (h *currencyRatesServiceHandler) GetRateCurrentForMerchant(ctx context.Context, in *GetRateCurrentForMerchantRequest, out *RateData) error {
	return h.CurrencyRatesServiceHandler.GetRateCurrentForMerchant(ctx, in, out)
}

func (h *currencyRatesServiceHandler) GetRateByDateForMerchant(ctx context.Context, in *GetRateByDateForMerchantRequest, out *RateData) error {
	return h.CurrencyRatesServiceHandler.GetRateByDateForMerchant(ctx, in, out)
}

func (h *currencyRatesServiceHandler) ExchangeCurrencyCurrentCommon(ctx context.Context, in *ExchangeCurrencyCurrentCommonRequest, out *ExchangeCurrencyResponse) error {
	return h.CurrencyRatesServiceHandler.ExchangeCurrencyCurrentCommon(ctx, in, out)
}

func (h *currencyRatesServiceHandler) ExchangeCurrencyCurrentForMerchant(ctx context.Context, in *ExchangeCurrencyCurrentForMerchantRequest, out *ExchangeCurrencyResponse) error {
	return h.CurrencyRatesServiceHandler.ExchangeCurrencyCurrentForMerchant(ctx, in, out)
}

func (h *currencyRatesServiceHandler) ExchangeCurrencyByDateCommon(ctx context.Context, in *ExchangeCurrencyByDateCommonRequest, out *ExchangeCurrencyResponse) error {
	return h.CurrencyRatesServiceHandler.ExchangeCurrencyByDateCommon(ctx, in, out)
}

func (h *currencyRatesServiceHandler) ExchangeCurrencyByDateForMerchant(ctx context.Context, in *ExchangeCurrencyByDateForMerchantRequest, out *ExchangeCurrencyResponse) error {
	return h.CurrencyRatesServiceHandler.ExchangeCurrencyByDateForMerchant(ctx, in, out)
}

func (h *currencyRatesServiceHandler) GetCommonRateCorrectionRule(ctx context.Context, in *CommonCorrectionRuleRequest, out *CorrectionRule) error {
	return h.CurrencyRatesServiceHandler.GetCommonRateCorrectionRule(ctx, in, out)
}

func (h *currencyRatesServiceHandler) GetMerchantRateCorrectionRule(ctx context.Context, in *MerchantCorrectionRuleRequest, out *CorrectionRule) error {
	return h.CurrencyRatesServiceHandler.GetMerchantRateCorrectionRule(ctx, in, out)
}

func (h *currencyRatesServiceHandler) AddCommonRateCorrectionRule(ctx context.Context, in *CommonCorrectionRule, out *EmptyResponse) error {
	return h.CurrencyRatesServiceHandler.AddCommonRateCorrectionRule(ctx, in, out)
}

func (h *currencyRatesServiceHandler) AddMerchantRateCorrectionRule(ctx context.Context, in *CorrectionRule, out *EmptyResponse) error {
	return h.CurrencyRatesServiceHandler.AddMerchantRateCorrectionRule(ctx, in, out)
}

func (h *currencyRatesServiceHandler) GetSupportedCurrencies(ctx context.Context, in *EmptyRequest, out *CurrenciesList) error {
	return h.CurrencyRatesServiceHandler.GetSupportedCurrencies(ctx, in, out)
}

func (h *currencyRatesServiceHandler) GetSettlementCurrencies(ctx context.Context, in *EmptyRequest, out *CurrenciesList) error {
	return h.CurrencyRatesServiceHandler.GetSettlementCurrencies(ctx, in, out)
}

func (h *currencyRatesServiceHandler) GetPriceCurrencies(ctx context.Context, in *EmptyRequest, out *CurrenciesList) error {
	return h.CurrencyRatesServiceHandler.GetPriceCurrencies(ctx, in, out)
}

func (h *currencyRatesServiceHandler) GetVatCurrencies(ctx context.Context, in *EmptyRequest, out *CurrenciesList) error {
	return h.CurrencyRatesServiceHandler.GetVatCurrencies(ctx, in, out)
}

func (h *currencyRatesServiceHandler) GetAccountingCurrencies(ctx context.Context, in *EmptyRequest, out *CurrenciesList) error {
	return h.CurrencyRatesServiceHandler.GetAccountingCurrencies(ctx, in, out)
}

func (h *currencyRatesServiceHandler) GetCurrenciesPrecision(ctx context.Context, in *EmptyRequest, out *CurrenciesPrecisionResponse) error {
	return h.CurrencyRatesServiceHandler.GetCurrenciesPrecision(ctx, in, out)
}
