syntax = "proto3";

option go_package = "github.com/paysuper/paysuper-billing-server/pkg/proto/billing";
package billing;

message CardPayAddress {
    string country = 1;
    string city = 2;
    string phone = 3;
    string state = 4;
    string street = 5;
    string zip = 6;
}

message CardPayItem {
    string name = 1;
    string description = 2;
    int32 count = 3;
    double price = 4;
}

message CardPayMerchantOrder {
    //// @inject_tag: validate:"required,hexadecimal,len=24"
    string id = 1;
    string description = 2;
    repeated CardPayItem items = 3;
    CardPayAddress shipping_address = 4;
}

message CallbackCardPayBankCardAccount {
    string holder = 1;
    string issuing_country_code = 2;
    string masked_pan = 3;
    string token = 4;
}

message CallbackCardPayCryptoCurrencyAccount {
    string crypto_address = 1;
    string crypto_transaction_id = 2;
    string prc_amount = 3;
    string prc_currency = 4;
}

message CardPayCustomer {
    string email = 1;
    string ip = 2;
    string id = 3;
    string locale = 4;
}

message CardPayEWalletAccount {
    string id = 1;
}

message CallbackCardPayPaymentData {
    string id = 1;
    double amount = 2;
    string auth_code = 3;
    string created = 4;
    string currency = 5;
    string decline_code = 6;
    string decline_reason = 7;
    string description = 8;
    bool is_3d = 9;
    string note = 10;
    string rrn = 11;
    string status = 12;
}

message CardPayCallbackRecurringDataFilling {
    string id = 1;
}

message CardPayCallbackRecurringData {
    string id = 1;
    double amount = 2;
    string auth_code = 3;
    string created = 4;
    string currency = 5;
    string decline_code = 6;
    string decline_reason = 7;
    string description = 8;
    bool is_3d = 9;
    string note = 10;
    string rrn = 11;
    string status = 12;
    CardPayCallbackRecurringDataFilling filing = 13;
}

message CardPayPaymentCallback {
    CardPayMerchantOrder merchant_order = 1;
    string payment_method = 2;
    string callback_time = 3;
    CallbackCardPayBankCardAccount card_account = 4;
    CallbackCardPayCryptoCurrencyAccount cryptocurrency_account = 5;
    CardPayCustomer customer = 6;
    CardPayEWalletAccount ewallet_account = 7;
    // @inject_tag: json:"payment_data,omitempty"
    CallbackCardPayPaymentData payment_data = 8;
    // @inject_tag: json:"recurring_data,omitempty"
    CardPayCallbackRecurringData recurring_data = 9;
}

message CardPayRefundCallbackRefundData {
    // @inject_tag: validate:"required,numeric,gt=0"
    double amount = 1;
    // @inject_tag: validate:"required"
    string created = 2;
    // @inject_tag: validate:"required,alpha,len=3"
    string currency	= 3;
    // @inject_tag: validate:"required"
    string id = 4;
    // @inject_tag: validate:"required"
    string status = 5;
    string auth_code = 6;
    string decline_code = 7;
    string decline_reason = 8;
    bool is_3d = 9;
    string rrn = 10;
}

message CardPayRefundCallbackPaymentData {
    // @inject_tag: validate:"required"
    string id = 1;
    // @inject_tag: validate:"numeric,gte=0"
    double remaining_amount = 2;
}

message CardPayRefundCallback {
    // @inject_tag: validate:"required"
    CardPayMerchantOrder merchant_order = 1;
    // @inject_tag: validate:"required"
    string payment_method = 2;
    // @inject_tag: validate:"required"
    CardPayRefundCallbackPaymentData payment_data = 3;
    // @inject_tag: validate:"required"
    CardPayRefundCallbackRefundData refund_data = 4;
    string callback_time = 5;
    // @inject_tag: json:"-"
    CallbackCardPayBankCardAccount card_account = 6;
    CardPayCustomer customer = 7;
    // @inject_tag: json:"-"
    CardPayEWalletAccount ewallet_account = 8;
}